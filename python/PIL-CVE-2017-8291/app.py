''' 이미지 크기 가져오기 앱 '''

# coding=utf-8
import os
from flask import Flask, request, redirect, flash, render_template_string, get_flashed_messages
from PIL import Image
from werkzeug.utils import secure_filename

# 업로드 폴더 설정
UPLOAD_FOLDER = '/tmp'

# 허용되는 파일 확장자
ALLOWED_EXTENSIONS = set(['png'])

# Flask 앱 생성
app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.secret_key = 'test'

def get_img_size(filepath=""):
    ''' 이미지 가로/세로 크기 가져오기 '''
    try:
        img = Image.open(filepath)
        img.load()
        return img.size
    except:
        return (0, 0)

def allowed_file(filename):
    ''' 파일 확장자 유효성 검사 '''
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/', methods=['GET', 'POST'])
def upload_file():
    ''' 파일 업로드 앱 '''
    if request.method == 'POST':
        # 파일이 요청에 포함되어 있는지 확인
        if 'file' not in request.files:
            flash('파일이 없습니다.')
            return redirect(request.url)
        
        # 업로드된 파일 객체 가져오기
        image_file = request.files['file']
        
        # 파일 이름이 비어있는지 확인
        if image_file.filename == '':
            flash('파일이 선택되지 않았습니다.')
            return redirect(request.url)
        
        # 파일 확장자 유효성 검사
        if not allowed_file(image_file.filename):
            flash('허용되지 않는 파일 형식입니다.')
            return redirect(request.url)
        
        # 파일 저장 및 크기 가져오기
        if image_file:
            filename = secure_filename(image_file.filename)
            img_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            image_file.save(img_path)
            height, width = get_img_size(img_path)
            
            # 이미지 크기 출력
            return '<html><body>이미지의 높이 : {}, 너비 : {}; </body></html>'.format(height, width)

    # 업로드 폼 렌더링
    return render_template_string('''
    <!doctype html>
    <title>파일 업로드</title>
    <h1>파일 업로드</h1>
    {% with messages = get_flashed_messages() %}
    {% if messages %}
        <ul class=flashes>
        {% for message in messages %}
        <li>{{ message }}</li>
        {% endfor %}
        </ul>
    {% endif %}
    {% endwith %}
    <form method=post enctype=multipart/form-data>
        <p><input type=file name=file>
        <input type=submit value=Upload>
    </form>
    ''')

if __name__ == '__main__':
    app.run(threaded=True, port=8000, host="0.0.0.0")