from flask import Flask, flash, get_flashed_messages, make_response,  redirect, render_template_string, request
from os import path, unlink
from PIL import Image

import tempfile

app = Flask(__name__)
app.secret_key = "0123456789ABCDEF"  # Flask 애플리케이션의 비밀 키 설정

@app.route('/', methods=['GET', 'POST'])  # 루트 URL에 대한 라우트 설정
def upload_file():
    if request.method == 'POST':  # POST 요청 처리
        file = request.files.get('image', None)  # 업로드된 파일 가져오기

        if not file:  # 파일이 없는 경우 에러 메시지 표시 후 리다이렉트
            flash('No image found')
            return redirect(request.url)

        filename = file.filename  # 파일 이름 가져오기
        ext = path.splitext(filename)[1]  # 파일 확장자 가져오기

        if (ext not in ['.jpg', '.jpeg', '.png', '.gif', '.bmp']):  # 유효하지 않은 확장자인 경우 에러 메시지 표시 후 리다이렉트
            flash('Invalid extension')
            return redirect(request.url)

        tmp = tempfile.mktemp("test")  # 임시 파일 생성
        img_path = "{}.{}".format(tmp, ext)  # 이미지 경로 설정

        file.save(img_path)  # 파일 저장

        img = Image.open(img_path)  # 이미지 열기
        w, h = img.size  # 이미지 크기 가져오기
        ratio = 256.0 / max(w, h)  # 비율 계산

        resized_img = img.resize((int(w * ratio), int(h * ratio)))  # 이미지 리사이즈
        resized_img.save(img_path)  # 리사이즈된 이미지 저장

        r = make_response()  
        r.data = open(img_path, "rb").read()  # 리사이즈된 이미지 읽기
        r.headers['Content-Disposition'] = 'attachment; filename=resized_{}'.format(filename)  # 응답 헤더 설정

        unlink(img_path)  # 임시 파일 삭제

        return r  # 응답 반환

    return render_template_string('''...''')  # GET 요청 처리: 업로드 폼 표시

if __name__ == '__main__':
    app.run(threaded=True, port=8000, host="0.0.0.0")  # 애플리케이션 실행


'''
위 파이썬 코드는 사용자가 이미지를 업로드하고 해당 이미지를 리사이징한 다음 다운로드할 수 있는 간단한 웹 애플리케이션을 구축하는 것입니다.
사용자는 루트 URL에 접속하여 이미지를 업로드하고, 이 이미지는 리사이즈되어 다운로드 링크가 생성됩니다. 코드는 Flask 웹 프레임워크를 사용하여 웹 페이지를 생성하고 이미지 처리를 수행하는 간단한 웹 애플리케이션을 만드는 것을 목표로 합니다.
'''


